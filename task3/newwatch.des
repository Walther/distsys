INITIALIZER:
    from Tkinter import *
    from DWatchGUI import DWatchGUI

    # Chrono Flag
    C_Inc_Flag = 0
    C_Button_Flag = 0

    # Time Flag
    T_Inc_Flag = 1

    root = Tk()
    root.title("Watch")
    g = DWatchGUI(root, eventhandler)

    eventhandler.start()
    root.mainloop()

STATECHART:
    Main[DS]
        TimeInc[CS][DS]
            TimeInc[CS][DS]
        ChronoInc[CS][DS]
            ChronoInc[CS][DS]
        Button[CS][DS]
            Display[DS]
                Mode[CS][DS]
                    Time[DS]
                    Chrono
                Operate[CS][DS]
                    ChronoPause[DS]
                    ChronoInc
                Light[CS][DS]
                    LightOff[DS]
                    LightOn
                    LightWait
                AlarmLight[CS][DS]
                    AlarmOff[DS]
                    AlarmOn
                        LightOff[DS]
                        LightOn
            AlarmEdit
                NotInAlarmEdit[DS]
                GoingToAlarmEdit
                InAlarmEdit
                    NotIncreasingTime[DS]
                    IncreasingTime
                TurningOffAlarmEdit
            TimeEdit
                NotInTimeEdit[DS]
                GoingToTimeEdit
                InTimeEdit
                    NotIncreasingTime[DS]
                    IncreasingTime
                TurningOffTimeEdit 
    

##### Increase ######

TRANSITION:
    S: Main.TimeInc.TimeInc
    N: Main.TimeInc.TimeInc
    T: 1
    C: T_Inc_Flag==1
    O: print "update time"
       g.increaseTimeByOne()

TRANSITION:
    S: Main.ChronoInc.ChronoInc
    N: Main.ChronoInc.ChronoInc
    T: 0.5
    C: C_Inc_Flag==1
    O: print "update chrono"
       g.increaseChronoByOne()


##### Display #####

TRANSITION:
    S: Main.Button.Display.Mode.Time
    N: Main.Button.Display.Mode.Time
    T: 1
    O: g.refreshTimeDisplay()
       g.refreshDateDisplay()

TRANSITION:
    S: Main.Button.Display.Mode.Chrono
    N: Main.Button.Display.Mode.Chrono
    T: 0.5
    O: g.refreshChronoDisplay()
       g.refreshDateDisplay()


##### Light #####

TRANSITION:
    S: Main.Button.Display.Light.LightOff
    N: Main.Button.Display.Light.LightOn
    E: lightOn
    O: print "LightOff -> LightOn"
       g.setIndiglo()

TRANSITION:
    S: Main.Button.Display.Light.LightOn
    N: Main.Button.Display.Light.LightWait
    E: lightOff
    O: print "Off in 2 sec"

TRANSITION:
    S: Main.Button.Display.Light.LightWait
    N: Main.Button.Display.Light.LightOff
    T: 2 [OTT]
    O: print "LightOn -> lightOff"
       g.unsetIndiglo()


##### Switch between Time & Chrono #####

TRANSITION:
    S: Main.Button.Display.Mode.Time
    N: Main.Button.Display.Mode.Chrono
    E: changeMode
    O: print "Time -> Chrono"
       g.refreshChronoDisplay()
       C_Button_Flag = 1

TRANSITION:
    S: Main.Button.Display.Mode.Chrono
    N: Main.Button.Display.Mode.Time
    E: changeMode
    O: print "Chrono -> Time"
       g.refreshTimeDisplay()
       C_Button_Flag = 0


##### Chrono Operation #####

TRANSITION:
    S: Main.Button.Display.Operate.ChronoPause
    N: Main.Button.Display.Operate.ChronoInc
    E: initChrono
    C: C_Button_Flag == 1
    O: print "start chrono"
       C_Inc_Flag = 1

TRANSITION:
    S: Main.Button.Display.Operate.ChronoInc
    N: Main.Button.Display.Operate.ChronoPause
    E: initChrono
    C: C_Button_Flag == 1
    O: print "pause chrono"
       C_Inc_Flag = 0

TRANSITION:
    S: Main.Button.Display.Operate.ChronoPause
    N: Main.Button.Display.Operate.ChronoPause
    E: resetChrono
    C: C_Button_Flag == 1
    O: print "reset chrono"
       g.resetChrono()

TRANSITION:
    S: Main.Button.Display.Operate.ChronoInc
    N: Main.Button.Display.Operate.ChronoInc
    E: resetChrono
    C: C_Button_Flag == 1
    O: print "reset chrono"
       g.resetChrono()


### Editing time

TRANSITION:
    S: Main.Button.Display.Mode.Time
    N: Main.Button.TimeEdit.GoingToTimeEdit
    E: editTime
    O: print "Going to time edit in 1.5 seconds"

TRANSITION:
    S: Main.Button.TimeEdit.GoingToTimeEdit
    N: Main.Button.TimeEdit.NotInTimeEdit
    E: released
    O: print "Not going to time edit"

TRANSITION:
    S: Main.Button.TimeEdit.GoingToTimeEdit
    N: Main.Button.TimeEdit.InTimeEdit.NotIncreasingTime
    T: 1.5
    O: print "Going to time edit now"
       g.startSelection()

TRANSITION:
    S: Main.Button.TimeEdit.InTimeEdit.NotIncreasingTime
    N: Main.Button.TimeEdit.TurningOffTimeEdit
    E: finishEdit
    O: print "Finishing editing time in 2 seconds"

TRANSITION:
    S: Main.Button.TimeEdit.TurningOffTimeEdit
    N: Main.Button.TimeEdit.InTimeEdit.NotIncreasingTime
    E: released
    O: print "Staying in time edit"

TRANSITION:
    S: Main.Button.TimeEdit.TurningOffTimeEdit
    N: Main.Button.Display.Mode.Time
    T: 2
    O: print "Turning off time edit"
       g.stopSelection()

TRANSITION:
    S: Main.Button.TimeEdit.InTimeEdit.NotIncreasingTime
    N: Main.Button.Display.Mode.Time
    T: 5
    O: print "Turn of time edit due to inactivity"
       g.stopSelection()

TRANSITION:
    S: Main.Button.TimeEdit.InTimeEdit.NotIncreasingTime
    N: Main.Button.TimeEdit.InTimeEdit.IncreasingTime
    E: increase
    O: print "Holding bottom left pressed, increasing time"
       g.increaseSelection()

TRANSITION:
    S: Main.Button.TimeEdit.InTimeEdit.IncreasingTime
    N: Main.Button.TimeEdit.InTimeEdit.IncreasingTime
    T: 0.3
    O: print "Increasing time"
       g.increaseSelection()

TRANSITION:
    S: Main.Button.TimeEdit.InTimeEdit.IncreasingTime
    N: Main.Button.TimeEdit.InTimeEdit.NotIncreasingTime
    E: stopInc
    O: print "Released buttom left button, not increasing time"

TRANSITION:
    S: Main.Button.TimeEdit.InTimeEdit.NotIncreasingTime
    N: Main.Button.TimeEdit.InTimeEdit.NotIncreasingTime
    E: editTime
    O: print "Going to next selection"
       g.selectNext()




### Alarm setting and editing

TRANSITION:
    S: Main.Button.Display.Mode.Time
    N: Main.Button.AlarmEdit.GoingToAlarmEdit
    E: setAlarm
    O: print "Going to alarm edit in 1.5 sec"

TRANSITION:
    S: Main.Button.AlarmEdit.GoingToAlarmEdit
    N: Main.Button.Display.Mode.Time
    E: onoff
    O: print "Alarm set at " + str(g.getAlarm()[0]) + ":" + str(g.getAlarm()[1]) + ":" + str(g.getAlarm()[2])
       g.setAlarm()

TRANSITION:
    S: Main.Button.AlarmEdit.GoingToAlarmEdit
    N: Main.Button.AlarmEdit.InAlarmEdit.NotIncreasingTime
    T: 1.5
    O: print "Going to alarm edit now"
       g.refreshAlarmDisplay()
       g.startSelection()

TRANSITION:
    S: Main.Button.AlarmEdit.InAlarmEdit.NotIncreasingTime
    N: Main.Button.AlarmEdit.TurningOffAlarmEdit
    E: finishEdit
    O: print "Turning off alarm edit in 2 seconds"

TRANSITION:
    S: Main.Button.AlarmEdit.TurningOffAlarmEdit
    N: Main.Button.AlarmEdit.InAlarmEdit.NotIncreasingTime
    E: released
    O: print "Staying in alarm edit"

TRANSITION:
    S: Main.Button.AlarmEdit.TurningOffAlarmEdit
    N: Main.Button.Display.Mode.Time
    T: 2
    O: print "Turning off alarm edit"
       g.stopSelection()

TRANSITION:
    S: Main.Button.AlarmEdit.InAlarmEdit.NotIncreasingTime
    N: Main.Button.Display.Mode.Time
    T: 5
    O: print "Turn of alarm edit due to inactivity"
       g.stopSelection()

TRANSITION:
    S: Main.Button.AlarmEdit.InAlarmEdit.NotIncreasingTime
    N: Main.Button.AlarmEdit.InAlarmEdit.IncreasingTime
    E: increase
    O: print "Holding bottom left pressed, increasing time"
       g.increaseSelection()

TRANSITION:
    S: Main.Button.AlarmEdit.InAlarmEdit.IncreasingTime
    N: Main.Button.AlarmEdit.InAlarmEdit.IncreasingTime
    T: 0.3
    O: print "Increasing time"
       g.increaseSelection()

TRANSITION:
    S: Main.Button.AlarmEdit.InAlarmEdit.IncreasingTime
    N: Main.Button.AlarmEdit.InAlarmEdit.NotIncreasingTime
    E: stopInc
    O: print "Released bottom left button, not increasing time"

TRANSITION:
    S: Main.Button.AlarmEdit.InAlarmEdit.NotIncreasingTime
    N: Main.Button.AlarmEdit.InAlarmEdit.NotIncreasingTime
    E: editTime
    O: print "Going to next selection"
       g.selectNext() 


### Alarm function

TRANSITION:
    S: Main.Button.Display.Mode.Time
    N: Main.Button.Display.AlarmLight.AlarmOn.LightOn
    T: 1
    C: g.checkTime() == True
    O: print "alarm true"

TRANSITION:
    S: Main.Button.Display.AlarmLight.AlarmOn
    N: Main.Button.Display.Mode.Time
    T: 4
    O: print "Turn off alarm after 4 seconds"
       g.unsetIndiglo()

TRANSITION:
    S: Main.Button.Display.AlarmLight.AlarmOn.LightOn
    N: Main.Button.Display.AlarmLight.AlarmOn.LightOff
    T: 0.5
    O: print "light on"
       g.setIndiglo()

TRANSITION:
    S: Main.Button.Display.AlarmLight.AlarmOn.LightOff
    N: Main.Button.Display.AlarmLight.AlarmOn.LightOn
    T: 0.5
    O: print "light off"
       g.unsetIndiglo()

# Turn off alarm by pressing bottom right
TRANSITION:
    S: Main.Button.Display.AlarmLight.AlarmOn
    N: Main.Button.Display.Mode.Time
    E: released
    O: print "alarm off"
       g.unsetIndiglo()

# Turn off alarm by pressing bottom left
TRANSITION:
    S: Main.Button.Display.AlarmLight.AlarmOn
    N: Main.Button.Display.Mode.Time
    E: onoff
    O: print "alarm off"
       g.unsetIndiglo()

# Turn off alarm by pressing top left
TRANSITION:
    S: Main.Button.Display.AlarmLight.AlarmOn
    N: Main.Button.Display.Mode.Time
    E: changeMode
    O: print "alarm off"
       g.unsetIndiglo()

# Turn off alarm by pressing top right
TRANSITION:
    S: Main.Button.Display.AlarmLight.AlarmOn
    N: Main.Button.Display.Mode.Time
    E: lighton
    O: print "alarm off"
       g.unsetIndiglo()